#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
import datetime
import sys
import os
import itertools
import functools
import re

from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL)

sys.path.append("{0}/libs".format(os.path.dirname(os.path.abspath(__file__))))
import common
logger = common.loginit(__name__,**common.loggercfg)
stdout = common.loginit("std",**common.stdoutcfg)

import influxc


#MXLOG = r"^(?P<rawtime>\d{8} \d{9}[+-]\d+) (?P<host>\S+) (?P<module>\S+) (?P<pid>\d+) (?P<ppid>\d+) (?P<tid>\d+) (?P<level>[^;\s]+);(?P<event>[^\)]+\))[: ]*(?P<parms>[^\r\n]*)\s*$"
MXLOG = r"^(?P<rawtime>\d{8} \d{9}[+-]\d+) (?P<host>\S+) (?P<module>\S+) (?P<pid>\d+) (?P<ppid>\d+) (?P<tid>\d+) (?P<level>[^;\s]+);(?P<event>[^\(]+)[^\)]+\)[: ]*(?P<parms>[^\r\n]*)\s*$"
MXALL = ["time", "host", "module", "pid", "ppid", "tid", "level", "event"]
MXTIMEFMT = '%Y%m%d %H%M%S'

time.strptime("20000101 000000", MXTIMEFMT) #work around for http://bugs.python.org/issue7980

def parse_mxlogparms(s):
    return dict([x.replace(' ','_').split('=') if x.count('=') == 1 else (str(i), x.replace(' ','_')) for (i,x) in enumerate(s.strip().split(":"))])

def dt(s):
    #dt= datetime.datetime.strptime(s[:15], MXTIMEFMT)+datetime.timedelta(microseconds=int(s[15:18]))
    return (datetime.datetime.strptime(s[:15], MXTIMEFMT)+datetime.timedelta(microseconds=int(s[15:18]))).strftime("%Y-%m-%dT%H:%M:%S.%f")

def ts(s):
    return time.mktime(tuple([tm for tm in time.strptime(s[:15],"%Y%m%d %H%M%S")]))

def ts10(s):
    return time.mktime(tuple([tm for tm in time.strptime("{0}9".format(s[:14]),"%Y%m%d %H%M%S")]))

def mxlog(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        d = func(*args, **kwargs)
        if not d: 
            return None 
        return dict([x if not x[0] in  ["rawtime", "parms"] else (x[0], parse_mxlogparms(x[1])) if x[0] == "parms" else ("time", ts(x[1])) for x in d.items()])
    return wrapper

@mxlog
def parse_line(line, regx):
    search = regx.search(line)
    return search.groupdict() if search else None


def stat_conns(parse_rule):
    regx = re.compile(parse_rule)
    conns={}
    event=""
    for i in itertools.count():
        raw_event = yield event if event else None
        event = parse_line( raw_event, regx )
        #event = parse_line( (yield event if event else None) , regx)

import Queue

def logsum(que, opts, interval_sec=10):

    w=influxc.init_poster(opts)
    ts=time.time()
    buckets={}
    while True:
        try:
            entry=que.get(block=True,timeout=1)
            ets=entry["time"]
            key=(entry["event"] if not entry["event"].startswith("MsgTrace") else "M_{0}".format(entry["parms"]["0"]), entry["level"], entry["module"], entry["host"])
            if not str(ets) in buckets:
                buckets[str(ets)]={}
            if not key in buckets[str(ets)]:
                buckets[str(ets)][key]=0 
            buckets[str(ets)][key]+=1
        except Queue.Empty as e:
            pass
        if (time.time() - ts) > interval_sec:
            targets = [x for x in buckets ]
            for x in targets:
                bx=buckets[x]
                body="".join(["mxlog.{0},level={1},module={2},mxhost={3} count={4} {5}\n".format(k[0],k[1],k[2],k[3],v,int(float(x))) for (k,v) in bx.items() ])
                stdout.info(body)
                w.send(body)
                del(buckets[x])
            ts+=interval_sec

def main(opts):
    import multiprocessing
    que=multiprocessing.Queue()
    p=multiprocessing.Process(target=logsum,args=(que,opts,))
    p.daemon=True
    p.start()
    stat = stat_conns(parse_rule = MXLOG)
    logger.debug("init generator:".format(stat.next()))
    for l in sys.stdin:
        logger.debug(l.strip())
        d=stat.send(l)
        if not d:
            logger.warning("CouldNotParse:{0}".format(l.replace("\n","\\n")))
            continue
        que.put(d)

def parsed_opts():
    import optparse
    import os
    opt = optparse.OptionParser()
    common.common_params(opt)
    influxc.influxc_params(opt)

    (opts, args)= opt.parse_args()
    return dict(opts.__dict__.items() + [("args", args)])


if __name__ == '__main__':

    opts = parsed_opts()
    logger.setLevel(opts['loglevel'])
    stdout.setLevel(opts['stdoutlevel'])
    if opts['prof']:
      import cProfile
      cProfile.run('main(opts)')
      sys.exit(0)
    main(opts)

